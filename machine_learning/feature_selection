import pandas as pd
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from statsmodels.stats.outliers_influence import variance_inflation_factor
from scipy.stats import ttest_ind

# 예시 데이터프레임 생성
df = pd.read_csv('../preprocess/preprocessed_data.csv')  # 실제 데이터프레임을 불러오는 코드

# 'dysarhtria' 레이블이 0과 1인 데이터프레임으로 분리
df_stroke_0 = df[df['stroke'] == 0]
df_stroke_1 = df[df['stroke'] == 1]

# 독립변인의 리스트 생성
independent_vars = df.columns.difference(['fname', 'stroke'])

# 결과를 저장할 딕셔너리 초기화
ttest_results = {}

# 각 독립변수에 대해 T-test 수행
for var in independent_vars:
    # 각 그룹의 데이터 추출
    data_0 = df_stroke_0[var]
    data_1 = df_stroke_1[var]

    # 평균과 표준편차 계산
    mean_0 = data_0.mean()
    mean_1 = data_1.mean()
    std_0 = data_0.std()
    std_1 = data_1.std()

    # T-test 수행
    t_stat, p_value = ttest_ind(data_0, data_1, equal_var=False)

    # 결과를 문자열로 포맷팅하여 저장
    ttest_results[var] = {
        'mean_0': f"{mean_0:.2f}",
        'std_0': f"{std_0:.2f}",
        'mean_1': f"{mean_1:.2f}",
        'std_1': f"{std_1:.2f}",
        't_stat': f"{t_stat:.2f}",
        'p_value': f"{p_value:.5f}",
        'sig': '***' if p_value < 0.001 else ('**' if p_value < 0.01 else ('*' if p_value < 0.05 else ' '))
    }

# 결과를 데이터프레임으로 변환
ttest_df = pd.DataFrame(ttest_results).T

# T-test 결과 출력
print(ttest_df)

df = pd.read_csv('../preprocess/another_preprocessed_data.csv')
df = df.drop(columns=['stroke', 'fname'])

# Correlation Matrix를 그리는 함수
def plot_correlation_matrix(df, filename):
    correlation_matrix = df.corr()
    plt.figure(figsize=(60, 45))
    sns.heatmap(correlation_matrix, annot=False, cmap='coolwarm', fmt='.2f')
    plt.title('Correlation Matrix')

    # x축과 y축 레이블의 폰트 사이즈 조정
    plt.xticks(fontsize=36, rotation=45)  # x축 레이블을 45도 회전
    plt.yticks(fontsize=36, rotation=0)  # y축 레이블을 가로 방향으로 (rotation=0)

    plt.savefig(filename)  # 그래프를 이미지 파일로 저장
    plt.close()  # 현재 그림을 닫아 메모리를 해제


# Correlation Matrix 그리기 및 저장
plot_correlation_matrix(df, 'correlation_matrix.png')


# VIF 계산 함수
def calculate_vif(df):
    X = df.dropna()  # 결측값 제거
    vif_data = pd.DataFrame()
    vif_data['Feature'] = X.columns
    vif_data['VIF'] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]
    return vif_data


# VIF 계산 및 출력
vif_df = calculate_vif(df)

# 상관 행렬 계산
correlation_matrix = df.corr().abs()

# 결과를 저장할 리스트
high_vif_details = []

for index, row in vif_df.iterrows():
    feature = row['Feature']

    # 상관계수 필터링
    high_corr_vars = correlation_matrix.index[correlation_matrix[feature] > 0.4].tolist()
    high_corr_vars.remove(feature)  # 자기 자신은 제외

    # 상관계수가 가장 높은 변수 10개 선택
    high_corr_vars_sorted = sorted(high_corr_vars, key=lambda x: abs(correlation_matrix.loc[feature, x]), reverse=True)
    high_corr_vars_top10 = high_corr_vars_sorted[:10]

    # 상관계수와 변수 이름을 튜플 형태로 저장
    high_corr_vars_tuples = [(var, round(correlation_matrix.loc[feature, var], 4)) for var in high_corr_vars_top10]

    high_vif_details.append({
        '변수 번호': correlation_matrix.columns.get_loc(feature),  # df_preprocessed의 인덱스를 사용
        '변수명': feature,
        'VIF 값': row['VIF'],
        'Top 10 High Correlations': high_corr_vars_tuples
    })

# 결과를 데이터프레임으로 변환하여 출력
high_vif_details_df = pd.DataFrame(high_vif_details)

# 결과 출력
print(high_vif_details_df.to_string(index=False))
